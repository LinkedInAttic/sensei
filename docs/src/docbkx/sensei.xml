<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book [
<!ENTITY cpp "C&#8288;+&#8288;+">
]>
<book version="5.0" xml:lang="en" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:ns5="http://www.w3.org/1998/Math/MathML"
      xmlns:ns4="http://www.w3.org/1999/xhtml"
      xmlns:ns3="http://www.w3.org/2000/svg"
      xmlns:ns="http://docbook.org/ns/docbook">
  <title>Sensei</title>

  <subtitle>A Distributed Elastic Realtime Searchable Database</subtitle>

  <info>
    <author>
      <personname>Sensei Development Team</personname>
    </author>

    <releaseinfo>$Id: sensei.xml,v 1.2 2011/04/25 08:56:30 bcui Exp
    $</releaseinfo>

    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="figures/sensei-small.png"
                   format="SVG" scale="150" valign="middle" />
      </imageobject>
    </mediaobject>
  </info>

  <chapter>
    <title>Introduction</title>

    <para>Sensei is a distributed database that is designed to handle the
    following type of query:</para>

    <programlisting>    SELECT f1,f2...fn FROM members
    WHERE c1 AND c2 AND c3..
    MATCH (fulltext query, e.g. "java engineer")
    GROUP BY fx,fy,fz...
    ORDER BY fa,fb...
    LIMIT offset,count</programlisting>

    <section>
      <title>Design Considerations</title>

      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">Data</emphasis>
          </para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Fault tolerance - when one replication is down, data is
              still accessible</para>
            </listitem>

            <listitem>
              <para>Durability - N copies of data is stored</para>
            </listitem>

            <listitem>
              <para>Through-put - Parallelizable request-handling on different
              nodes/data replicas, designed to handle internet traffic</para>
            </listitem>

            <listitem>
              <para>Consistency - Eventally consistent</para>
            </listitem>

            <listitem>
              <para>Data recovery - each shared/replica is noted with a
              watermark for data recovery</para>
            </listitem>

            <listitem>
              <para>Large dataset - designed to handle 100s millions -
              billions of rows</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Horizontally Scalable</emphasis>e</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Data is partitioned - so work-load is also
              distributed</para>
            </listitem>

            <listitem>
              <para>Elasticity - Nodes can be added to accomodate data
              growth</para>
            </listitem>

            <listitem>
              <para>Online expansion - Cluster can grow while handling online
              requests</para>
            </listitem>

            <listitem>
              <para>Online cluster management - Cluster topology can change
              while handling online requests</para>
            </listitem>

            <listitem>
              <para>Low operational/maintenance costs - Push it, leave it and
              forget it.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">Performance</emphasis>
          </para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>low indexing latency - real-time update</para>
            </listitem>

            <listitem>
              <para>low search latency - millisecond query response
              time</para>
            </listitem>

            <listitem>
              <para>low volatility - low variance in both indexing and search
              latency</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">Customizability</emphasis>
          </para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>plug-in framework - custom query handling logic</para>
            </listitem>

            <listitem>
              <para>routing factory - custom routing logic, default:
              round-robin</para>
            </listitem>

            <listitem>
              <para>index sharding strategy - different sharding strategy for
              different applications, e.g. time, mod etc.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Comparing to Traditional RDBMS</title>

      <para><emphasis role="bold">RDBMS</emphasis>:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>vertically scaled</para>
        </listitem>

        <listitem>
          <para>strong ACID guarantee</para>
        </listitem>

        <listitem>
          <para>relational support</para>
        </listitem>

        <listitem>
          <para>performance cost with full-text integration</para>
        </listitem>

        <listitem>
          <para>high query latency with large dataset, esp. Group By</para>
        </listitem>

        <listitem>
          <para>indexes needs to be built for all sort possibilities
          offline</para>
        </listitem>
      </itemizedlist>

      <para><emphasis role="bold">Sensei</emphasis>:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>horizontally scaled</para>
        </listitem>

        <listitem>
          <para>relaxed Consistency with high durability guarantees</para>
        </listitem>

        <listitem>
          <para>data is streamed in, so Atomicity and Isolation is to be
          handled by the data producer</para>
        </listitem>

        <listitem>
          <para>full-text support</para>
        </listitem>

        <listitem>
          <para>low query latency with arbitrarily large dataset</para>
        </listitem>

        <listitem>
          <para>dynamic sorting, index is already built for all sortable
          fields and their combinations</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Architectural Diagram</title>

      <mediaobject>
        <imageobject role="fo">
          <imagedata align="center" fileref="figures/sensei-overview.jpg"
                     format="JPG" scale="75" valign="middle" />
        </imageobject>

        <imageobject role="html">
          <imagedata align="center" fileref="figures/sensei-overview.jpg"
                     format="JPG" scale="100" valign="middle" />
        </imageobject>
      </mediaobject>
    </section>
  </chapter>

  <!-- Introduction -->

  <chapter>
    <title>Getting Started</title>

    <section>
      <title>Overview</title>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Realtime indexing/searching</para>
        </listitem>
        <listitem>
          <para>Cluster management</para>
        </listitem>
        <listitem>
          <para>Automatic and configuration data partitioning</para>
        </listitem>
        <listitem>
          <para>Support for structured and faceted search</para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Prerequisites</title>

      <itemizedlist spacing="compact">
        <listitem>
          <para>Java 1.6 or higher</para>
        </listitem>
        <listitem>
          <para>maven 2.2.1 or higher</para>
        </listitem>
        <listitem>
          <para>zookeeper 3.2.0 (<link
          xlink:href="http://hadoop.apache.org/zookeeper/">http://hadoop.apache.org/zookeeper/</link>)</para>
        </listitem>
        
      </itemizedlist>
    </section>
	
    <section>
      <title>Embedded Technologies: </title>
      <itemizedlist spacing="compact">
        <listitem>

          <para>bobo-browse <link xlink:href="http://sna-projects.com/bobo/">http://sna-projects.com/bobo/</link>
          </para>
        </listitem>
        <listitem>
          <para>zoie <link xlink:href="http://sna-projects.com/zoie/">http://sna-projects.com/zoie/</link>
          </para>
        </listitem>
        <listitem>
          <para>lucene <link xlink:href="http://lucene.apache.org/">http://lucene.apache.org/</link>
          </para>
        </listitem>
        <listitem>
          <para>norbert <link xlink:href="http://sna-projects.com/norbert/">http://sna-projects.com/norbert/</link>
          </para>
        </listitem>
        <listitem>
          <para>spring <link xlink:href="http://www.springsource.com/">http://www.springsource.com/</link>
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Details </title>

      <section>
        <title>Build </title>
        <orderedlist spacing="compact">
          <listitem>

            <para>Check out trunk: 
            </para>
            <programlisting><![CDATA[git clone git://github.com/javasoze/sensei.git sensei-trunk]]>
            </programlisting>
          </listitem>
          <listitem>
            <para>simply do:
            </para>
            <programlisting><![CDATA[ant]]></programlisting>
          </listitem>
        </orderedlist>
      </section>

      <section>
        <title>ZooKeeper </title>
        <para>
          In order to run the sample of sensei-search, you have to run
          an instance of <emphasis role="bold">ZooKeeper</emphasis>
          first.
        </para>

        <para>
          You may download it from <link
          xlink:href="http://hadoop.apache.org/zookeeper/">http://hadoop.apache.org/zookeeper/</link>.
        </para>

        <para>
          Using the sample configuration file in <code>zookeeper-3.2.0/conf</code> by copying
          <code>zookeeper-3.2.0/conf/zoo_sample.cfg</code> to <code>zookeeper-3.2.0/conf/zoo.cfg</code> and
          start an instance of zookeeper by running
        </para>
        <programlisting><![CDATA[    zookeeper-3.2.0/bin/zkServer.sh start]]></programlisting>
        <para>
          For details, see <link
          xlink:href="http://hadoop.apache.org/zookeeper/docs/current/zookeeperStarted.html">http://hadoop.apache.org/zookeeper/docs/current/zookeeperStarted.html</link>
        </para>
      </section>

      <section>
        <title>Starting Sensei Nodes </title>
        <para>
          Do <code>bin/start-sensei-node.sh</code> to start a server node.  This command
          takes 1 argument: <code>conf.dir</code>, which contains all configuration
          information for a given Sensei node.
        </para>

        <para>
          An example command-line that will work to fire up a single sensei node
          with some sample data:
        </para>
        <programlisting><![CDATA[    bin/start-sensei-node.sh conf]]></programlisting>
        <para>
          Note: Do not expect to see any logs after running this command. If you
          run it, have zookeeper up and running, a REST server (as discussed
          below) will also be started, and you will be able to get some sample
          search results.
        </para>
      </section>

      <section>
        <title>Web Application and Restful end-point: </title>
        <para>
          A restful end-point along with a web interactive client would be started as well:
        </para>
        <itemizedlist spacing="compact">
          <listitem>

            <para>restful endpoint: <link xlink:href="http://localhost:8080/sensei?q=">http://localhost:8080/sensei?q=</link>
            </para>
          </listitem>
          <listitem>
            <para>web client: <link xlink:href="http://localhost:8080">http://localhost:8080</link>
            </para>
          </listitem>
        </itemizedlist>

        <para>For details, please checkout: Restful JSON End-point &amp; Client Application
        </para>
      </section>

      <section>
        <title>Starting Client </title>
        <para>
          After you start at least one node, you can run <code>bin/sensei-client.sh client-conf</code> to start a client. (Edit <code>client-conf/sensei-client.conf</code>
          to change properties)
        </para>

        <para>
          Type help to see command list:
        </para>
        <programlisting><![CDATA[  help - prints this message
  exit - quits
  nodes - prints a list of node information
  query <query string> - sets query text
  facetspec <name>:<minHitCount>:<maxCount>:<sort> - add facet spec
  page <offset>:<count> - set paging parameters
  select <name>:<value1>,<value2>... - add selection, with ! in front of value indicates a not
  sort <name>:<dir>,... - set sort specs
  showReq: shows current request
  clear: clears current request
  clearSelections: clears all selections
  clearSelection <name>: clear selection specified
  clearFacetSpecs: clears all facet specs
  clearFacetSpec <name>: clears specified facetspec
  browse - executes a search]]></programlisting>
      </section>
    </section>
  </chapter>

  <chapter>
    <title>Sensei Demo</title>

    <section>
      <title>Overview</title>

      <para>We feel the best way to learn a new system is through
      examples.</para>

      <para>Sensei comes with a sample application and this page aims to
      provide an anatomy of the Sensei car demo and to help new-comers in
      building a Sensei application.</para>

      <para>File layout:</para>

      <itemizedlist spacing="compact">
        <listitem>
          <para>configuration files: <filename>conf/*</filename></para>
        </listitem>

        <listitem>
          <para>data file: <filename>data/cars.json</filename></para>
        </listitem>

        <listitem>
          <para>output index: <filename>index/</filename></para>
        </listitem>

        <listitem>
          <para>web-app: <filename>src/main/webapp/</filename></para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Run The Demo</title>

      <para>
        <emphasis role="bold">Build:</emphasis>
      </para>

      <programlisting>    ant</programlisting>

      <para>
        <emphasis role="bold">Make sure zookeeper is running:</emphasis>
      </para>

      <programlisting>    $ZK_home/bin/zkServer.sh start</programlisting>

      <para>
        <emphasis role="bold">Run:</emphasis>
      </para>

      <programlisting>    ./bin/start-sensei-node conf/</programlisting>
    </section>

    <section>
      <title>URLs</title>

      <itemizedlist>
        <listitem>
          <para>Sensei Web Client: <link
          xlink:href="http://localhost:8080/">http://localhost:8080/</link></para>
        </listitem>

        <listitem>
          <para>Demo: <link
          xlink:href="http://localhost:8080/">http://localhost:8080/</link></para>
        </listitem>

        <listitem>
          <para>Rest Endpoint: <link
          xlink:href="http://localhost:8080/sensei">http://localhost:8080/sensei</link></para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Screenshots</title>

      <figure>
        <title>Sensei Web Client</title>

        <mediaobject>
          <imageobject role="fo">
            <imagedata align="center" fileref="figures/sensei-web-client.png"
                       format="PNG" scale="25" valign="middle" />
          </imageobject>

          <imageobject role="html">
            <imagedata align="center" fileref="figures/sensei-web-client.png"
                       format="PNG" scale="50" valign="middle" />
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Demo</title>

        <mediaobject>
          <imageobject role="fo">
            <imagedata align="center" fileref="figures/demo.png" format="PNG"
                       scale="25" valign="middle" />
          </imageobject>

          <imageobject role="html">
            <imagedata align="center" fileref="figures/demo.png" format="PNG"
                       scale="50" valign="middle" />
          </imageobject>
        </mediaobject>
      </figure>

      <figure>
        <title>Reset Endpoint</title>

        <mediaobject>
          <imageobject role="fo">
            <imagedata align="center" fileref="figures/reset-end-point.png"
                       format="PNG" scale="25" valign="middle" />
          </imageobject>

          <imageobject role="html">
            <imagedata align="center" fileref="figures/reset-end-point.png"
                       format="PNG" scale="50" valign="middle" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Diagram</title>

      <figure>
        <title>The Sensei Demo System</title>

        <mediaobject>
          <imageobject role="fo">
            <imagedata align="center" fileref="figures/sensei-demo.png"
                       format="PNG" scale="90" valign="middle" />
          </imageobject>

          <imageobject role="html">
            <imagedata align="center" fileref="figures/sensei-demo.png"
                       format="PNG" scale="100" valign="middle" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </chapter>

  <chapter>
    <title>Sensei Configuration</title>

    <section>
      <title>Overview</title>

      <para>A Sensei node is configured by a set of files. These files
      describe a Sensei node in terms of data models, server configuration,
      indexing tuning parameters, customizations etc.</para>

      <para>This document aims to describe how parts are pieced together via
      these configuration files.</para>
    </section>

    <section>
      <title>Data Modeling</title>

      <para>Data models are described in the <filename>schema.xml</filename>
      file (xsd definition:
      http://javasoze.github.com/sensei/schema/sensei-schema.xsd.)</para>

      <para>The demo example can be found here:
      https://github.com/javasoze/sensei/blob/master/conf/schema.xml</para>

      <para>The schema file is composed by 2 sections:</para>

      <orderedlist>
        <listitem>
          <para>table</para>
        </listitem>

        <listitem>
          <para>facets</para>
        </listitem>
      </orderedlist>

      <section>
        <title>Table Schema</title>

        <para>A Sensei instance can be viewed as a giant table with many
        columns and many rows. The concept of such table directly correlates
        to that of traditional RDBMS's.</para>

        <para>A table has 3 attributes:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>uid (mandatory) - defines name of the primary key field.
            This must be of type long.</para>
          </listitem>

          <listitem>
            <para>delete-field (optional) - defines the field that would
            indicate a delete event (we will get back to this later)</para>
          </listitem>

          <listitem>
            <para>skip-field (optional) - defines the field that would
            indicate a skipping event (we will get back to this later)</para>
          </listitem>
        </itemizedlist>

        <para>A table is also composed of a set of columns. Each column has a
        name and a type.</para>

        <para>These are the supported types:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para>string - value is a string, e.g. "<code>abc</code>"</para>
          </listitem>

          <listitem>
            <para>int - integer value</para>
          </listitem>

          <listitem>
            <para>long - long value</para>
          </listitem>

          <listitem>
            <para>short - short value</para>
          </listitem>

          <listitem>
            <para>float - a floating point value</para>
          </listitem>

          <listitem>
            <para>double - double value</para>
          </listitem>

          <listitem>
            <para>char - a character</para>
          </listitem>

          <listitem>
            <para>date - a date value, must be accompanied by a format string
            to be used to parse a data string</para>
          </listitem>

          <listitem>
            <para>text - a searchable text segment, standard Lucene indexing
            specification can also be specified here, e.g. index="ANALYZED"
            termvector="NO" etc.</para>
          </listitem>
        </itemizedlist>

        <para>A column that is not of type "text" is considered a meta
        column.</para>

        <para>Any meta column can be specified to be either single(default) or
        multi. When a column is specified to be multi, e.g. multi="true", this
        means given a row, it can have more than 1 value for this column. A
        delimiter string can be provided to help the indexer to parse the
        values (default delimiter is ",", for example, to specify a different
        delimiter to be ":", we can do this by delimiter=":")</para>

        <para>Example:
        https://github.com/javasoze/sensei/blob/master/conf/schema.xml</para>

        <section>
          <title>JSON</title>

          <para>By default, data objects inserted into Sensei are JSON
          objects.</para>

          <para><emphasis role="bold">Example</emphasis>:</para>

          <para>Given the following table definition:</para>

          <programlisting>&lt;table uid="id"&gt;
   &lt;column name="color" type="string" /&gt;
   &lt;column name="year" type="int" /&gt;
   &lt;column name=tag" type="string" multi="true" /&gt;
   &lt;column name="description" type="text" index="ANALYZED" store="NO" /&gt;
 &lt;/table&gt;
</programlisting>

          <para>The following table shows as an example how a json object is
          mapped into the table:</para>

          <para>
            <emphasis role="bold">JSON object</emphasis>
          </para>

          <programlisting> {
   id:1
   color:"red",
   year:2000,
   tag:"cool,leather",
   description:"i love this car"
 }</programlisting>

          <para>
            <emphasis role="bold">Table view</emphasis>
          </para>

          <informaltable border="2" cellpadding="6" cellspacing="0"
                         frame="hsides" rules="groups">
            <colgroup>
              <col align="left" />

              <col align="left" />

              <col align="left" />

              <col align="left" />

              <col align="left" />
            </colgroup>

            <thead>
              <tr>
                <th align="left" scope="col">id</th>

                <th align="left" scope="col">color</th>

                <th align="left" scope="col">year</th>

                <th align="left" scope="col">tag</th>

                <th align="left" scope="col">description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td align="left">1</td>

                <td align="left">red</td>

                <td align="left">2000</td>

                <td align="left">cool, leather</td>

                <td align="left">i love this car</td>
              </tr>
            </tbody>
          </informaltable>
        </section>

        <section>
          <title>Deletes</title>

          <para>To deleted a row from Sensei, simply insert a data object with
          the specified delete-field set to true.</para>

          <para>
            <emphasis role="bold">Example:</emphasis>
          </para>

          <para>Given the table schema:</para>

          <programlisting>&lt;table uid="id" delete-field="isDelete"&gt;...
&lt;/table&gt;
</programlisting>

          <para>The following JSON object would delete the row where
          id=5:</para>

          <programlisting>{
  id:5,
  isDelete:"true"
}</programlisting>
        </section>

        <section>
          <title>Skips</title>

          <para>In cases where runtime logic decides whether a data object
          should be skipped, the skip field can be useful.</para>

          <para>
            <emphasis role="bold">Example:</emphasis>
          </para>

          <para>Given the table schema:</para>

          <programlisting>&lt;table uid="id" skip-field="isSkip"&gt;...
&lt;/table&gt;</programlisting>

          <para>The following JSON object would be skipped from
          indexing:</para>

          <programlisting>{
  id:7,
  isSkip:"true"
}</programlisting>
        </section>
      </section>

      <section>
        <title>Facet Schema</title>

        <para>The second section is the facet schema, which defines how
        columns can be queried.</para>

        <para>If we think of the table section defines how data is added into
        Sensei, then the facet section describes how these data can be
        queried.</para>

        <para>The facet sections is composed of a set of facet
        definitions.</para>

        <para>A facet definition requires a name and a type.</para>

        <para>Possible types:</para>

        <itemizedlist spacing="compact">
          <listitem>
            <para><code>simple</code>: simplest facet, 1 row = 1 discrete
            value</para>
          </listitem>

          <listitem>
            <para><code>path</code>: hierarchical facet, e.g. a/b/c</para>
          </listitem>

          <listitem>
            <para><code>range</code>: range facet, used to support range
            queries</para>
          </listitem>

          <listitem>
            <para><code>multi</code>: 1 row = N discrete values</para>
          </listitem>

          <listitem>
            <para><code>compact-multi</code>: similar to multi, but possible
            values are limited to 32</para>
          </listitem>

          <listitem>
            <para><code>custom</code>: any user defined facet type (We will
            cover this in advanced section)</para>
          </listitem>
        </itemizedlist>

        <para>Example: <link
        xlink:href="https://github.com/javasoze/sensei/blob/master/conf/schema.xml">https://github.com/javasoze/sensei/blob/master/conf/schema.xml</link></para>

        <section>
          <title>Optional Attributes</title>

          <section>
            <title>Column</title>

            <para>The column attribute references the column names defined in
            the table section. By default, the name is used.</para>

            <para>This can be useful if you want to name the facet name to be
            different from the defined column name, or if you want to have
            multiple facets defined on the same column.</para>
          </section>

          <section>
            <title>Depends</title>

            <para>A comma delimited string denoting a set of facet names this
            facet is to be depended on.</para>

            <para>When <code>depends</code> is specified, Sensei guarantees
            the depending facets are loaded before this facet.</para>

            <para>This is also how Composite Facets are constructed. (Another
            advanced topic)</para>
          </section>

          <section>
            <title>Dynamic</title>

            <para>Dynamic facets are useful when data layout is not known
            until query time.</para>

            <para>Some examples:</para>

            <itemizedlist spacing="compact">
              <listitem>
                <para>searcher's social network</para>
              </listitem>

              <listitem>
                <para>dynamic time ranges from when the search request is
                issued</para>
              </listitem>

              <listitem>
                <para>...</para>
              </listitem>
            </itemizedlist>

            <para>This is another advanced topic to be discussed later.</para>
          </section>
        </section>

        <section>
          <title>Parameters</title>

          <para>Every facet is configured via a list of parameters.</para>

          <para>Some examples:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>For path facets, separator strings can be
              configured</para>
            </listitem>

            <listitem>
              <para>For range facets, pre-defined ranges can be
              configured</para>
            </listitem>

            <listitem>
              <para>...</para>
            </listitem>
          </itemizedlist>

          <para>How parameters are interpreted is dependent on the facet
          type.</para>
        </section>

        <section>
          <title>Customized Facets</title>

          <para>We understand we cannot possibly cover all use-cases, and
          being customizable is necessary.</para>

          <para>TO BE ADDED...</para>
        </section>
      </section>
    </section>

    <!-- Data Modeling -->

    <section>
      <title>System Configuration</title>

      <para>The Sensei system is configured via the
      <filename>sensei.properties</filename> file.</para>

      <para>The demo configuration can be found here: <link
      xlink:href="https://github.com/javasoze/sensei/blob/master/conf/sensei.properties">https://github.com/javasoze/sensei/blob/master/conf/sensei.properties</link></para>

      <para>Sensei configuration consists of the following sections:</para>

      <orderedlist spacing="compact">
        <listitem>
          <para>server: e.g. port to listen on, rpc paramters etc.</para>
        </listitem>

        <listitem>
          <para>cluster: cluster manager, sharding, request routing
          etc.</para>
        </listitem>

        <listitem>
          <para>indexing: data interpretation, tokenization, indexer type
          etc.</para>
        </listitem>

        <listitem>
          <para>broker: e.g. entry into Sensei system</para>
        </listitem>

        <listitem>
          <para>plugins</para>
        </listitem>
      </orderedlist>

      <section>
        <title>Server</title>

        <para>TO BE FINISHED</para>
      </section>

      <section>
        <title>Cluster</title>

        <para>TO BE FINISHED</para>
      </section>

      <section>
        <title>Indexing</title>

        <para>TO BE FINISHED</para>
      </section>

      <section>
        <title>Broker</title>

        <para>TO BE FINISHED</para>
      </section>

      <section>
        <title>Plug-ins</title>

        <para>TO BE FINISHED</para>
      </section>
    </section>

    <!-- System Configurations -->

    <section>
      <title>Extensions</title>

      <para>TO BE FINISHED</para>
    </section>
  </chapter>
</book>
